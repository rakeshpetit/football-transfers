---
const { page } = Astro.props;

// Function to clean text by removing all URLs
function cleanText(text: string): string {
  return text.replace(/https?:\/\/[^\s]+/g, '') // Remove any URL starting with http:// or https://
    .replace(/\s+/g, ' ') // Remove extra spaces that might be left after removing URLs
    .trim();
}

// Group transfers by player name for the current page
const groupedTransfers = page.data.reduce((acc, transfer) => {
  const playerName = transfer.playerName || 'Unknown Player';
  if (!acc[playerName]) {
    acc[playerName] = {
      transfers: [],
      transferAmount: null,
      maxReliability: 0
    };
  }
  
  // Add transfer to the group
  acc[playerName].transfers.push(transfer);
  
  // Update transfer amount if this source is more reliable
  const reliability = transfer.reliability || 0;
  if (transfer.transferAmount && reliability > acc[playerName].maxReliability) {
    acc[playerName].transferAmount = transfer.transferAmount;
    acc[playerName].maxReliability = reliability;
  }
  return acc;
}, {});

// Function to generate page numbers array with ellipsis
function getPageNumbers(currentPage: number, lastPage: number) {
    const delta = 2; // Number of pages to show on each side of current page
    const range = [];
    
    for (let i = 1; i <= lastPage; i++) {
        if (
            i === 1 || // First page
            i === lastPage || // Last page
            (i >= currentPage - delta && i <= currentPage + delta) // Pages around current
        ) {
            range.push(i);
        }
    }
    
    const withEllipsis = [];
    let prev = 0;
    
    for (const curr of range) {
        if (prev && curr - prev > 1) {
            withEllipsis.push('...');
        }
        withEllipsis.push(curr);
        prev = curr;
    }
    
    return withEllipsis;
}
---

<div class="grid gap-8">
    {Object.entries(groupedTransfers).map(([playerName, data]) => (
        <div class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-2xl font-bold text-gray-900">{playerName}</h2>
                {data.transferAmount && (
                    <span class="text-lg font-semibold text-green-600">
                        {data.transferAmount}
                    </span>
                )}
            </div>
            <div class="space-y-4">
                {data.transfers.map(transfer => (
                    <article class="border-t pt-4 first:border-t-0 first:pt-0">
                        <div class="flex items-start justify-between">
                            <div class="space-y-2">
                                <div class="flex items-center space-x-2 text-base text-gray-800">
                                    <span class="font-semibold">{transfer.sourceClub || 'Unknown Club'}</span>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                                    </svg>
                                    <span class="font-semibold">{transfer.destinationClub || 'Unknown Club'}</span>
                                </div>
                            </div>
                            <div class="flex items-center">
                                <div class={`px-3 py-1 rounded-full text-sm font-medium
                                    ${(transfer.reliability * 10) > 70 ? 'bg-green-100 text-green-800' : 
                                    (transfer.reliability * 10) > 40 ? 'bg-yellow-100 text-yellow-800' : 
                                    'bg-red-100 text-red-800'}`}>
                                    {`${transfer.reliability * 10}% Reliable`}
                                </div>
                            </div>
                        </div>

                        <p class="mt-4 text-gray-600">{cleanText(transfer.text)}</p>

                        <div class="mt-4 flex items-center justify-between text-sm">
                            <div class="flex items-center space-x-2 text-gray-500">
                                <span>Reported by:</span>
                                <a href={`https://twitter.com/${transfer.username}`} target="_blank" rel="noopener noreferrer" 
                                    class="text-blue-600 hover:underline">
                                    {transfer.name}
                                </a>
                            </div>
                            <a href={transfer.permanentUrl} target="_blank" rel="noopener noreferrer" 
                                class="text-blue-600 hover:underline flex items-center space-x-1">
                                <span>View Tweet</span>
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                                </svg>
                            </a>
                        </div>
                    </article>
                ))}
            </div>
        </div>
    ))}
</div>

<!-- Pagination Controls with Page Numbers -->
<div class="mt-8 flex justify-center items-center space-x-2">
    {page.url.prev && (
        <a href={page.url.prev} class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
            Previous
        </a>
    )}
    
    <div class="flex flex-wrap items-center gap-1">
        {getPageNumbers(page.currentPage, page.lastPage).map((pageNum) => (
            pageNum === '...' 
                ? <span class="px-2">{pageNum}</span>
                : <a
                    href={pageNum === 1 ? '/' : `/transfers/${pageNum}`}
                    class={`px-3 py-1 rounded-md ${
                        page.currentPage === pageNum
                            ? 'bg-blue-600 text-white'
                            : 'bg-white text-blue-600 hover:bg-blue-50'
                    }`}
                >
                    {pageNum}
                </a>
        ))}
    </div>

    {page.url.next && (
        <a href={page.url.next} class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
            Next
        </a>
    )}
</div>
